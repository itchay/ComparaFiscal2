unit UnFrmArquivosBaseDadosATF;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  System.Actions, Vcl.ActnList, Vcl.Grids, Vcl.ComCtrls, UnClasseATF, System.IOUtils;

type
  TFrmArquivosBaseDadosATF = class(TForm)
    OpdCaminhoATF: TOpenDialog;
    ActionList1: TActionList;
    ActFechar: TAction;
    PnlBotoes: TPanel;
    BtnNovo: TBitBtn;
    BtnSalvar: TBitBtn;
    BtnListar: TBitBtn;
    PnlInfoDoc: TPanel;
    Label1: TLabel;
    EdtCaminhoArqATF: TEdit;
    SpbCaminhoArqReceita: TSpeedButton;
    SpbCaminhoArqATF: TSpeedButton;
    GroupBox4: TGroupBox;
    EdtCodigoDocumento: TEdit;
    GroupBox3: TGroupBox;
    DateEmissao: TDateTimePicker;
    Label2: TLabel;
    LblRazaoSocial: TLabel;
    StgATF: TStringGrid;
    GroupBox5: TGroupBox;
    SpeedButton2: TSpeedButton;
    BtnExcluir: TBitBtn;
    ActLimpar: TAction;
    LblQtdeEncontradas: TLabel;
    LblTotalEncontradas: TLabel;
    procedure ActFecharExecute(Sender: TObject);
    procedure ActLimparExecute(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure SpbCaminhoArqATFClick(Sender: TObject);
    procedure BtnSalvarClick(Sender: TObject);
    procedure BtnNovoClick(Sender: TObject);
    procedure BtnListarClick(Sender: TObject);
    procedure BtnExcluirClick(Sender: TObject);
  private
    { Private declarations }
    oNovoATF: TATF;
    Procedure iniciaGridATF();
    procedure carregaATFTela;
    procedure carregaGridATF();
    procedure bloqueiaLiberaTela(lLibera: boolean);
    procedure bloqueiaLiberaBotoes(lNovo, lSalvar, lListar, lExcluir: boolean);

    function validaArquivoATF(caminhoArquivo: String): Boolean;
    function carregaRegistroArquivoATF(linha: String): Boolean;
  public
    { Public declarations }
  end;

var
  FrmArquivosBaseDadosATF: TFrmArquivosBaseDadosATF;

implementation

uses
  UnClasseUtils, UnClasseATF_Nota;//, UnFrmListarATF;

{$R *.dfm}

procedure TFrmArquivosBaseDadosATF.ActFecharExecute(Sender: TObject);
begin
  if Application.MessageBox('Os dados não salvos serão perdidos. Deseja continuar?','Aviso',mb_yesno + MB_ICONWARNING + MB_DEFBUTTON2) = id_yes then
    Close();
end;

procedure TFrmArquivosBaseDadosATF.ActLimparExecute(Sender: TObject);
begin
  oNovoATF := TATF.Create();
  iniciaGridATF();
  EdtCaminhoArqATF.Text := '...';
  EdtCodigoDocumento.Clear;
  LblRazaoSocial.Caption := '...';
  DateEmissao.DateTime := now();
end;

procedure TFrmArquivosBaseDadosATF.BtnExcluirClick(Sender: TObject);
begin
  //salvar banco de dados
  try
    oNovoATF.excluir();
    ShowMessage('ATF removido com Sucesso!');
    //retorna ao estado inicial
    FormShow(self);
  except on E: Exception do
    ShowMessage('Não foi possível excluir o ATF!' + #13 +
                'Mensagem de Erro: ' + E.Message);
  end;
end;

procedure TFrmArquivosBaseDadosATF.BtnListarClick(Sender: TObject);
begin
  {try
    FrmListarATF := TFrmListarATF.Create(Self);
    FrmListarATF.ShowModal();
    if FrmListarATF.oATFSelecionado.Id_ATF <> 0 then
    begin
      ActLimparExecute(Self);
      bloqueiaLiberaTela(true);
      bloqueiaLiberaBotoes(true, false, true, true);
      FrmArquivosATF.Caption := '[Consulta] Arquivos - ATF';

      oNovoATF := FrmListarATF.oATFSelecionado;
      carregaATFTela();
    end;
  finally
    FreeAndNil(FrmListarATF);
  end;}
end;

procedure TFrmArquivosBaseDadosATF.BtnNovoClick(Sender: TObject);
begin
  if (oNovoATF.Arquivo <> '')
  AND(Application.MessageBox('Os dados não salvos serão perdidos. Deseja continuar?','Aviso',mb_yesno + MB_ICONWARNING) <> id_yes) then
    exit;
  ActLimparExecute(Self);
  bloqueiaLiberaTela(true);
  bloqueiaLiberaBotoes(true, true, true, false);
  FrmArquivosBaseDadosATF.Caption := '[Novo] Arquivos - ATF';
end;

procedure TFrmArquivosBaseDadosATF.BtnSalvarClick(Sender: TObject);
begin
  //salvar banco de dados
  try
    oNovoATF.Id_ATF:= oNovoATF.salvar();
    ShowMessage('ATF Salvo com Sucesso!');
    //retorna ao estado inicial
    FormShow(self);
  except on E: Exception do
    ShowMessage('Não foi possível salvar o ATF!' + #13 +
                'Mensagem de Erro: ' + E.Message);
  end;
end;

procedure TFrmArquivosBaseDadosATF.FormShow(Sender: TObject);
begin
  //limpa a tela
  ActLimparExecute(self);
  BloqueiaLiberaTela(false);
  BloqueiaLiberaBotoes(true, false, true, false);
  FrmArquivosBaseDadosATF.Caption := 'Arquivos - ATF';
end;

procedure TFrmArquivosBaseDadosATF.bloqueiaLiberaTela(lLibera: boolean);
begin
  SpbCaminhoArqATF.Enabled := lLibera;
end;

procedure TFrmArquivosBaseDadosATF.bloqueiaLiberaBotoes(lNovo, lSalvar, lListar, lExcluir: boolean);
begin
  BtnNovo.Enabled := lNovo;
  BtnSalvar.Enabled := lSalvar;
  BtnListar.Enabled := lListar;
  BtnExcluir.Enabled := lExcluir;
end;

Procedure TFrmArquivosBaseDadosATF.iniciaGridATF();
begin
  limparGrid(StgATF);

  with StgATF do
  begin
    FixedCols:= 0;

    Cells[1, 0]:= 'Serie Documento';
    Cells[2, 0]:= 'Número Documento';
    Cells[3, 0]:= 'Chave de Acesso';
    Cells[4, 0]:= 'Data Emissão';
    Cells[5, 0]:= 'Tipo Operacao';
    Cells[6, 0]:= 'Valor Total';
  end;

  carregaGridATF();
end;

procedure TFrmArquivosBaseDadosATF.SpbCaminhoArqATFClick(Sender: TObject);
var
  arquivo: TextFile;
  linha: String;
  i:integer;
begin
  ActLimparExecute(Self);
  try
    Cursor := crHourGlass;
    if OpdCaminhoATF.Execute then
    begin
      if validaArquivoATF(OpdCaminhoATF.FileName) then
      begin
        AssignFile(arquivo, OpdCaminhoATF.FileName);
        Reset(arquivo);
        Application.ProcessMessages();
        while not Eof(arquivo) do
        begin
          Readln(arquivo, linha);
          carregaRegistroArquivoATF(linha);
        end;
        CloseFile(arquivo);

        oNovoATF.CaminhoArquivo := OpdCaminhoATF.FileName;
        oNovoATF.Arquivo := TPath.GetFileName(OpdCaminhoATF.FileName);
        carregaATFTela();
      end
      else
      begin
        //if oListaChaveAcessoArqATF <> Nil then
          //FreeAndNil(oListaChaveAcessoArqATF);
        Application.MessageBox('Arquivo .txt a ser comparado (ATF) não possui estrutura de um arquivo ATF!' + #13 +
                               'Por favor selecione um arquivo .txt no formato de ATF',
                               'Atenção', MB_ICONWARNING + MB_OK);
        SpbCaminhoArqATFClick(Self);
      end;
    end
    else
    begin
      //if oListaChaveAcessoArqATF <> Nil then
        //FreeAndNil(oListaChaveAcessoArqATF);
      //EdtCaminhoArqATF.Text := '...';
    end;
  finally
    Cursor := crDefault;
  end;
end;

function TFrmArquivosBaseDadosATF.validaArquivoATF(caminhoArquivo: String): Boolean;
var
  arquivo: TextFile;
  linha: String;
begin
  Result := False;

  //Ler primeira linha do arquivo
  AssignFile(arquivo, caminhoArquivo);
  Reset(arquivo);
  Readln(arquivo, linha);

  Result := ((Trim(linha) <> '') and (Copy(linha, 1, 15) = 'Chave_de_acesso'));
end;

procedure TFrmArquivosBaseDadosATF.carregaATFTela;
begin
  EdtCaminhoArqATF.Text := oNovoATF.CaminhoArquivo;
  EdtCodigoDocumento.Text := IntToStr(oNovoATF.Id_ATF);
  LblRazaoSocial.Caption := oNovoATF.Emitente.NomeEmpresa;
  DateEmissao.DateTime := oNovoATF.DataEmissao;

  carregaGridATF();
end;

procedure TFrmArquivosBaseDadosATF.carregaGridATF();
var
  i: Integer;
  auxValor: double;
  auxQtde: integer;
begin
  limparGrid(StgATF);
  auxValor:= 0;
  auxQtde:= 0;

  with StgATF do
  begin
    auxQtde := oNovoATF.ListaNotas.Count;
    if oNovoATF.ListaNotas.Count = 0 then
    begin
      StgATF.RowCount:= 2;
      LblQtdeEncontradas.Caption:= 'Nenhum Registro Encontrado';
      LblTotalEncontradas.Caption:= 'Valor Total: R$ 0,00';
    end
    else
      StgATF.RowCount:= oNovoATF.ListaNotas.Count + 1;

    for i:= 0 to oNovoATF.ListaNotas.Count - 1 do
    begin
      Cells[1, i + 1]:= IntToStr(oNovoATF.ListaNotas[i].SERIE);
      Cells[2, i + 1]:= IntToStr(oNovoATF.ListaNotas[i].Num_Doc);
      Cells[3, i + 1]:= oNovoATF.ListaNotas[i].CHAVE_ACESSO;
      Cells[4, i + 1]:= FormatDateTime('dd/mm/yyyy', oNovoATF.ListaNotas[i].DATA_EMISSAO);

      if oNovoATF.ListaNotas[i].TIPO_OPERACAO = '0' then
        Cells[5, i + 1]:= 'Entrada'
      else
        Cells[5, i + 1]:= 'Saida';

      Cells[6, i + 1]:= FloatToStrF(oNovoATF.ListaNotas[i].VALOR_TOTAL_NOTA, ffnumber, 15, 02);
      auxValor := auxValor + oNovoATF.ListaNotas[i].VALOR_TOTAL_NOTA;
    end;

  end;
  //atualiza informação de totais
  LblQtdeEncontradas.Caption:= IntToStr(auxQtde) + ' Registro(s) encontrada(s)';
  LblTotalEncontradas.Caption:= 'Valor Total: R$ ' + FloatToStrF(auxValor,ffnumber,10,02);
end;

function TFrmArquivosBaseDadosATF.carregaRegistroArquivoATF(linha: String): Boolean;
var
  auxLinhaRestante: string;
  auxColuna: string;
  i: integer;
  auxEmpresa: string;
  auxNota: TATF_Nota;
begin
  i:= 0;
  auxLinhaRestante:= linha;

  if ((Trim(linha) <> '') and (Copy(linha, 1, 15) <> 'Chave_de_acesso')) then
  begin
    auxNota := TATF_Nota.Create();

    while(i <= 38) do
    begin
      auxColuna := Copy(auxLinhaRestante, 1, Pos('|', auxLinhaRestante) -1);
      auxLinhaRestante := Copy(auxLinhaRestante, Pos('|', auxLinhaRestante) + 1, Length(auxLinhaRestante) - (Pos('|', auxLinhaRestante)));

      case i of
          0: auxNota.CHAVE_ACESSO := auxColuna;
          1: auxNota.NUM_DOC := StrToInt(auxColuna);
          2: auxNota.SERIE := StrToInt(auxColuna);
          3: auxNota.DATA_EMISSAO := StrToDate(auxColuna);
          4: auxNota.HORA_EMISSAO := StrToTime(auxColuna);
          5: auxNota.SITUACAO := auxColuna;
          6: auxNota.TIPO_OPERACAO := auxColuna;
          7: auxNota.VALOR_TOTAL_NOTA := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          8: auxNota.Emitente.NomeEmpresa := auxColuna;
          9: auxNota.Emitente.CNPJ := auxColuna;
          10: auxNota.Emitente.InscricaoEstadual := auxColuna;
          11: auxNota.Emitente.UF := auxColuna;
          12:
          begin
            auxNota.NOME_RAZAO_SOCIAL_DEST := auxColuna;
            if auxNota.TIPO_OPERACAO = 1 then
              oNovoATF.Emitente.NomeEmpresa := auxColuna;
          end;
          13:
          begin
            auxNota.CPF_CNPJ_DEST := auxColuna;
            if auxNota.TIPO_OPERACAO = 1 then
              oNovoATF.Emitente.CNPJ := auxColuna;
          end;
          14:
          begin
            auxNota.INSCRICAO_ESTADUAL_DEST := auxColuna;
            if auxNota.TIPO_OPERACAO = 1 then
              oNovoATF.Emitente.CNPJ := auxColuna;
          end;
          15:
          begin
            auxNota.UF_DEST := auxColuna;
            if auxNota.TIPO_OPERACAO = 1 then
              oNovoATF.Emitente.CNPJ := auxColuna;
          end;
          16: auxNota.PLACA_VEICULO_REBOQUE := auxColuna;
          17: auxNota.UF_PLACA := auxColuna;
          18: auxNota.NOME_TRANSPORTADORA := auxColuna;
          19: auxNota.INSCRICAO_ESTADUAL_TRANSP := auxColuna;
          20: auxNota.CPF_CNPJ_TRANSPORTADORA := auxColuna;
          21: auxNota.MODALIDADE_FRETE := auxColuna;
          22: auxNota.BASE_ICMS := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          23: auxNota.VALOR_ICMS := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          24: auxNota.BASE_ICMS_ST := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          25: auxNota.VALOR_ICMS_SUBSTITUICAO := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          26: auxNota.VALOR_TOTAL_DOS_PRODUTOS := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          27: auxNota.VALOR_FRETE := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          28: auxNota.VALOR_SEGURO := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          29: auxNota.VALOR_DESCONTO := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          30: auxNota.VALOR_OUTRAS_DESPESAS := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          31: auxNota.VALOR_IPI := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          32: auxNota.VALOR_TOTAL_ICMS_UF_DEST := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          33: auxNota.VALOR_TOTAL_ICMS_UF_REMET := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          34: auxNota.VALOR_ICMS_FCP_UF_DEST := StrToFloatCorrigido(retiraCaractere('.', auxColuna));
          35: auxNota.IP_EMITENTE := auxColuna;
          36: auxNota.PORTA_CONEXAO_ORIGEM := auxColuna;
          37: auxNota.DATA_HORA_CONEXAO_ORIGEM := StrToDateTimeCorrigido(auxLinhaRestante);
      end;

      i:= i + 1;
    end;

    oNovoATF.ListaNotas.Add(auxNota);
  end;

end;

end.
