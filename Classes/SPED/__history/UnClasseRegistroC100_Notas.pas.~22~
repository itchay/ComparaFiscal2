unit UnClasseRegistroC100_Notas;

interface

uses
  Generics.Collections;
  //UnClasseRegistro, Generics.Collections, UnClasseRegistroC170, UnClasseRegistroC190;

type
  // Nota Fiscal (C�digo 01), Nota Fiscal Avulsa (C�digo 1B),
  // Nota Fiscal de Produtor (C�digo 04) e NF-e (C�digo 55)
  TRegistroC100 = class (TObject)
    private
      sCHAVE_ACESSO,
      sNOME_RAZAO_SOCIAL_DEST,
      sCPF_CNPJ_DEST,
      sINSCRICAO_ESTADUAL_DEST,
      sPLACA_VEICULO_REBOQUE,
      sUF_PLACA,
      sNOME_TRANSPORTADORA,
      sINSCRICAO_ESTADUAL_TRANSP,
      sCPF_CNPJ_TRANSPORTADORA,
      sIP_EMITENTE,
      sPORTA_CONEXAO_ORIGEM,
      sSITUACAO,
      sTIPO_OPERACAO,
      sUF_DEST,
      sMODALIDADE_FRETE: string;

      iID,
      iNUM_DOC,
      iSERIE: integer;

      fVALOR_TOTAL_NOTA,
      fBASE_ICMS,
      fVALOR_ICMS,
      fBASE_ICMS_ST,
      fVALOR_ICMS_SUBSTITUICAO,
      fVALOR_TOTAL_DOS_PRODUTOS,
      fVALOR_FRETE,
      fVALOR_SEGURO,
      fVALOR_DESCONTO,
      fVALOR_OUTRAS_DESPESAS,
      fVALOR_IPI,
      fVALOR_TOTAL_ICMS_UF_DEST,
      fVALOR_TOTAL_ICMS_UF_REMET,
      fVALOR_ICMS_FCP_UF_DEST: double;

      daDATA_EMISSAO: TDATE;
      tHORA_EMISSAO: TTIME;
      dtDATA_HORA_CONEXAO_ORIGEM: TDateTime;

      const
        _TAMANHO_REG = 04;
        _TAMANHO_IND_OPER = 01;
        _TAMANHO_EMIT = 01;
        _TAMANHO_COD_MOD = 02;
        _TAMANHO_COD_SIT = 02;
        _TAMANHO_CHV_NFE = 44;
        _TAMANHO_IND_PGTO = 01;
        _TAMANHO_IND_FRT = 01;

    public

      property CHAVE_ACESSO: string
          read sCHAVE_ACESSO
          write sCHAVE_ACESSO;

      property NOME_RAZAO_SOCIAL_DEST: string
          read sNOME_RAZAO_SOCIAL_DEST
          write sNOME_RAZAO_SOCIAL_DEST;

      property CPF_CNPJ_DEST: string
          read sCPF_CNPJ_DEST
          write sCPF_CNPJ_DEST;

      property INSCRICAO_ESTADUAL_DEST: string
          read sINSCRICAO_ESTADUAL_DEST
          write sINSCRICAO_ESTADUAL_DEST;

      property PLACA_VEICULO_REBOQUE: string
          read sPLACA_VEICULO_REBOQUE
          write sPLACA_VEICULO_REBOQUE;

      property UF_PLACA: string
          read sUF_PLACA
          write sUF_PLACA;

      property NOME_TRANSPORTADORA: string
          read sNOME_TRANSPORTADORA
          write sNOME_TRANSPORTADORA;

      property INSCRICAO_ESTADUAL_TRANSP: string
          read sINSCRICAO_ESTADUAL_TRANSP
          write sINSCRICAO_ESTADUAL_TRANSP;

      property CPF_CNPJ_TRANSPORTADORA: string
          read sCPF_CNPJ_TRANSPORTADORA
          write sCPF_CNPJ_TRANSPORTADORA;

      property IP_EMITENTE: string
          read sIP_EMITENTE
          write sIP_EMITENTE;

      property PORTA_CONEXAO_ORIGEM: string
          read sPORTA_CONEXAO_ORIGEM
          write sPORTA_CONEXAO_ORIGEM;

      property SITUACAO: string
          read sSITUACAO
          write sSITUACAO;

      property TIPO_OPERACAO: string
          read sTIPO_OPERACAO
          write sTIPO_OPERACAO;

      property UF_DEST: string
          read sUF_DEST
          write sUF_DEST;

      property MODALIDADE_FRETE: string
          read sMODALIDADE_FRETE
          write sMODALIDADE_FRETE;

      property ID: integer
          read iID
          write iID;

      property NUM_DOC: integer
          read iNUM_DOC
          write iNUM_DOC;

      property SERIE: integer
          read iSERIE
          write iSERIE;

      property VALOR_TOTAL_NOTA: double
          read fVALOR_TOTAL_NOTA
          write fVALOR_TOTAL_NOTA;

      property BASE_ICMS: double
          read fBASE_ICMS
          write fBASE_ICMS;

      property VALOR_ICMS: double
          read fVALOR_ICMS
          write fVALOR_ICMS;

      property BASE_ICMS_ST: double
          read fBASE_ICMS_ST
          write fBASE_ICMS_ST;

      property VALOR_ICMS_SUBSTITUICAO: double
          read fVALOR_ICMS_SUBSTITUICAO
          write fVALOR_ICMS_SUBSTITUICAO;

      property VALOR_TOTAL_DOS_PRODUTOS: double
          read fVALOR_TOTAL_DOS_PRODUTOS
          write fVALOR_TOTAL_DOS_PRODUTOS;

      property VALOR_FRETE: double
          read fVALOR_FRETE
          write fVALOR_FRETE;

      property VALOR_SEGURO: double
          read fVALOR_SEGURO
          write fVALOR_SEGURO;

      property VALOR_DESCONTO: double
          read fVALOR_DESCONTO
          write fVALOR_DESCONTO;

      property VALOR_OUTRAS_DESPESAS: double
          read fVALOR_OUTRAS_DESPESAS
          write fVALOR_OUTRAS_DESPESAS;

      property VALOR_IPI: double
          read fVALOR_IPI
          write fVALOR_IPI;

      property VALOR_TOTAL_ICMS_UF_DEST: double
          read fVALOR_TOTAL_ICMS_UF_DEST
          write fVALOR_TOTAL_ICMS_UF_DEST;

      property VALOR_TOTAL_ICMS_UF_REMET: double
          read fVALOR_TOTAL_ICMS_UF_REMET
          write fVALOR_TOTAL_ICMS_UF_REMET;

      property VALOR_ICMS_FCP_UF_DEST: double
          read fVALOR_ICMS_FCP_UF_DEST
          write fVALOR_ICMS_FCP_UF_DEST;

      property aDATA_EMISSAO: TDATE
          read daDATA_EMISSAO
          write daDATA_EMISSAO;

      property HORA_EMISSAO: TTIME
          read tHORA_EMISSAO
          write tHORA_EMISSAO;

      property tDATA_HORA_CONEXAO_ORIGEM: TDateTime
          read dtDATA_HORA_CONEXAO_ORIGEM
          write dtDATA_HORA_CONEXAO_ORIGEM;

      function salvar(lIdSPED: integer): boolean;
      function listar(lIdSped: string): TObjectList<TRegistroC100>;
      procedure excluir(lIdSPED: integer);

      constructor Create();
  end;

implementation

uses UnClasseUtils, System.SysUtils, UnConstantes, IBQuery, UnClassePool_BD_IB, Dialogs;

{ TRegistroC100 }

constructor TRegistroC100.Create;
begin
  inherited Create();
  sCHAVE_ACESSO:= '';
  sNOME_RAZAO_SOCIAL_DEST:= '';
  sCPF_CNPJ_DEST:= '';
  sINSCRICAO_ESTADUAL_DEST:= '';
  sPLACA_VEICULO_REBOQUE:= '';
  sUF_PLACA:= '';
  sNOME_TRANSPORTADORA:= '';
  sINSCRICAO_ESTADUAL_TRANSP:= '';
  sCPF_CNPJ_TRANSPORTADORA:= '';
  sIP_EMITENTE:= '';
  sPORTA_CONEXAO_ORIGEM:= '';
  sSITUACAO:= '';
  sTIPO_OPERACAO:= '';
  sUF_DEST:= '';
  sMODALIDADE_FRETE:= '';
  iID:= 0;
  iNUM_DOC:= 0;
  iSERIE:= 0;
  fVALOR_TOTAL_NOTA:= 0;
  fBASE_ICMS:= 0;
  fVALOR_ICMS:= 0;
  fBASE_ICMS_ST:= 0;
  fVALOR_ICMS_SUBSTITUICAO:= 0;
  fVALOR_TOTAL_DOS_PRODUTOS:= 0;
  fVALOR_FRETE:= 0;
  fVALOR_SEGURO:= 0;
  fVALOR_DESCONTO:= 0;
  fVALOR_OUTRAS_DESPESAS:= 0;
  fVALOR_IPI:= 0;
  fVALOR_TOTAL_ICMS_UF_DEST:= 0;
  fVALOR_TOTAL_ICMS_UF_REMET:= 0;
  fVALOR_ICMS_FCP_UF_DEST:= 0;
  daDATA_EMISSAO:= now();
  tHORA_EMISSAO:= now();
  dtDATA_HORA_CONEXAO_ORIGEM:= now();
end;

function TRegistroC100.salvar(lIdSPED: integer): boolean;
var
  i: Integer;
  query1, query2: TIBQuery;
begin
  Result := false;
  query1 := PoolDeConexoes.getConexao(_BD_COMPARA_FISCAL).createNewQuery;
  try
    try
       with query1 do
       begin
          SQL.Text:= ' INSERT INTO RC100_NOTAS(IND_OPER,' +
                     '                  IND_EMIT,' +
                     '                  COD_PART,' +
                     '                  COD_MOD,' +
                     '                  COD_SIT,' +
                     '                  SER,' +
                     '                  NUM_DOC,' +
                     '                  CHV_NFE,' +
                     '                  DT_DOC,' +
                     '                  DT_E_S,' +
                     '                  VL_DOC,' +
                     '                  IND_PGTO,' +
                     '                  VL_DESC,' +
                     '                  VL_ABAT_NT,' +
                     '                  VL_MERC,' +
                     '                  IND_FRT,' +
                     '                  VL_FRT,' +
                     '                  VL_SEG,' +
                     '                  VL_OUT_DA,' +
                     '                  VL_BC_ICMS,' +
                     '                  VL_ICMS,' +
                     '                  VL_BC_ICMS_ST,' +
                     '                  VL_ICMS_ST,' +
                     '                  VL_IPI,' +
                     '                  VL_PIS,' +
                     '                  VL_COFINS,' +
                     '                  VL_PIS_ST,' +
                     '                  VL_COFINS_ST,' +
                     '                  ID_SPED)' +
                     ' VALUES (' + QuotedStr(self.sInd_Oper) + ',' +
                     '         ' + QuotedStr(self.sInd_Emit) + ',' +
                     '         ' + QuotedStr(self.sCod_Part) + ',' +
                     '         ' + QuotedStr(self.sCod_Mod) + ',' +
                     '         ' + QuotedStr(self.sCod_Sit) + ',' +
                     '         ' + QuotedStr(self.sSer) + ',' +
                     '         ' + QuotedStr(self.sNum_Doc) + ',' +
                     '         ' + QuotedStr(self.sChv_Nfe) + ',' +
                     '         ' + QuotedStr(self.sDt_Doc) + ',' +
                     '         ' + QuotedStr(self.sDt_E_S) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Doc)) + ',' +
                     '         ' + QuotedStr(self.sInd_Pgto) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Desc)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Abat_Nt)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Merc)) + ',' +
                     '         ' + QuotedStr(self.sInd_Frt) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Frt)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Seg)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_Out_Da)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_BC_ICMS)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_ICMS)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_BC_ICMS_ST)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_ICMS_ST)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_IPI)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_PIS)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_COFINS)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_PIS_ST)) + ',' +
                     '         ' + QuotedStr(formataFloatParaBanco(self.sVl_COFINS_ST)) + ',' +
                     '         ' + QuotedStr(IntToStr(lIdSPED)) + ')';

          ExecSQL;
          Transaction.Commit;
          Close;

          Result := true;
       end;
    except
      showmessage('Registro C100 Não Inserido no BD:' + self.sChv_Nfe + ' Num Doc:' + self.sNum_Doc);
    end;

  finally
    FreeAndNil(query1);
  end;
end;

function TRegistroC100.listar(lIdSped: string): TObjectList<TRegistroC100>;
var
  auxC100: TRegistroC100;
  i: Integer;
  query: TIBQuery;
  ini, fim: string;
begin
  query := PoolDeConexoes.getConexao(_BD_COMPARA_FISCAL).createNewQuery;
  Result:= TObjectList<TRegistroC100>.Create();
  try
    with query do
    begin
      SQL.Text:=     ' SELECT          n.IND_OPER,' +
                     '                 n.IND_EMIT,' +
                     '                 n.COD_PART,' +
                     '                 n.COD_MOD,' +
                     '                 n.COD_SIT,' +
                     '                 n.SER,' +
                     '                 n.NUM_DOC,' +
                     '                 n.CHV_NFE,' +
                     '                 n.DT_DOC,' +
                     '                 n.DT_E_S,' +
                     '                 n.VL_DOC,' +
                     '                 n.IND_PGTO,' +
                     '                 n.VL_DESC,' +
                     '                 n.VL_ABAT_NT,' +
                     '                 n.VL_MERC,' +
                     '                 n.IND_FRT,' +
                     '                 n.VL_FRT,' +
                     '                 n.VL_SEG,' +
                     '                 n.VL_OUT_DA,' +
                     '                 n.VL_BC_ICMS,' +
                     '                 n.VL_ICMS,' +
                     '                 n.VL_BC_ICMS_ST,' +
                     '                 n.VL_ICMS_ST,' +
                     '                 n.VL_IPI,' +
                     '                 n.VL_PIS,' +
                     '                 n.VL_COFINS,' +
                     '                 n.VL_PIS_ST,' +
                     '                 n.VL_COFINS_ST' +
                    ' FROM RC100_NOTAS n' +
                    ' WHERE n.ID_SPED = ' + QuotedStr(lIdSped);

      Open;
      if not IsEmpty then
      begin
        First();
        while not Eof do
        begin
          auxC100:= TRegistroC100.Create();
          with auxC100 do
          begin
            Ind_Oper := FieldByName('Ind_Oper').AsString;
            Ind_Emit := FieldByName('Ind_Emit').AsString;
            Cod_Part := FieldByName('Cod_Part').AsString;
            Cod_Mod := FieldByName('Cod_Mod').AsString;
            Cod_Sit := FieldByName('Cod_Sit').AsString;
            Ser := FieldByName('Ser').AsString;
            Num_Doc := FieldByName('Num_Doc').AsString;
            Chv_Nfe := FieldByName('Chv_Nfe').AsString;
            Dt_Doc := FieldByName('Dt_Doc').AsString;
            Dt_E_S := FieldByName('Dt_E_S').AsString;
            Vl_Doc := FieldByName('Vl_Doc').AsString;
            Ind_Pgto := FieldByName('Ind_Pgto').AsString;
            Vl_Desc := FieldByName('Vl_Desc').AsString;
            Vl_Abat_Nt := FieldByName('Vl_Abat_Nt').AsString;
            Vl_Merc := FieldByName('Vl_Merc').AsString;
            Ind_Frt := FieldByName('Ind_Frt').AsString;
            Vl_Frt := FieldByName('Vl_Frt').AsString;
            Vl_Seg := FieldByName('Vl_Seg').AsString;
            Vl_Out_Da := FieldByName('Vl_Out_Da').AsString;
            Vl_BC_ICMS := FieldByName('Vl_BC_ICMS').AsString;
            Vl_ICMS := FieldByName('Vl_ICMS').AsString;
            Vl_BC_ICMS_ST := FieldByName('Vl_BC_ICMS_ST').AsString;
            Vl_ICMS_ST := FieldByName('Vl_ICMS_ST').AsString;
            Vl_IPI := FieldByName('Vl_IPI').AsString;
            Vl_PIS := FieldByName('Vl_PIS').AsString;
            Vl_COFINS := FieldByName('Vl_COFINS').AsString;
            Vl_PIS_ST := FieldByName('Vl_PIS_ST').AsString;
            Vl_COFINS_ST := FieldByName('Vl_COFINS_ST').AsString;
          end;

          Result.Add(auxC100);
          Next();
        end;
      end;
      Close;
    end;
  finally
    FreeAndNil(query);
  end;
end;

procedure TRegistroC100.excluir(lIdSPED: integer);
var
  query: TIBQuery;
begin
  query := PoolDeConexoes.getConexao(_BD_COMPARA_FISCAL).createNewQuery;
  try
    with query do
    begin
      SQL.Text := ' DELETE FROM RC100_NOTAS n' +
                  ' WHERE n.id_sped = ' + QuotedStr(IntToStr(lIdSPED));
      ExecSQL;
      Transaction.Commit;
      Close;
    end;
  finally
    FreeAndNil(query);
  end;
end;


end.

